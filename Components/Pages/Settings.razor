@page "/Settings"
@using TodoApp.Components.Modals
@implements IDisposable;
<form>
    <div class="form-group row">
        <InputSelect class="form-control form-control-lg col-sm-10" id="lightingMode" @bind-Value="@localSettings.DefaultLighting">

            @foreach (var lightingState in Enum.GetValues(typeof(DefaultLighting)))
            {

                <option value="@lightingState">Lighting Mode - @lightingState</option>
            }
        </InputSelect>
    </div>
    <div class="form-group row" style="margin-top: 30px;">
        <button type="button" class="btn btn-primary" @onclick="OnShowInfoClicked">
            Show Info
        </button>
    </div>
    <div class="form-group row" style="margin-top: 30px;">
        <button disabled="@IsDisabled" type="button" class="btn btn-primary" @onclick="ConfirmDeletionDatabase">
            Delete database
        </button>
    </div>
</form>
@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    SettingsRecord localSettings = SettingsHelper.GetSettingsRecord();
    protected static bool IsDisabled { get; set; } 

    void IDisposable.Dispose()
    {
        SettingsHelper.UpdateSettings(localSettings);
    }

    private void ConfirmDeletionDatabase()
    {
        IsDisabled = true;
        var window = App.Current.Windows[0].Page;
        window.Dispatcher.Dispatch(async () =>
        {
            if (await window.DisplayAlert("Confirmation", "Are you sure you want to delete your database? You will not be able to recover this data and it will reset everything", "Accept", "Cancel"))
                DatabaseHelper.DeleteDatabase();
            IsDisabled = false;
            StateHasChanged();
        });

    }
    private void OnShowInfoClicked()
    {
        ((IModalService)Modal).Show<About>(new ModalOptions()
            {
                HideHeader = true
            });
    }

}
